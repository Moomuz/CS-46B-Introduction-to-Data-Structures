package sudoku;

/*import java.util.*;


public class Solver 
{
	private Grid						problem;
	private ArrayList<Grid>				solutions;
	
	
	public Solver(Grid problem)
	{
		this.problem = problem;
	}
	
	
	public void solve()
	{
		solutions = new ArrayList<>();
		solveRecurse(problem);
	}
	
		
	// 
	// FINISH THIS.
	//
	// Standard backtracking recursive solver.
	//
	private void solveRecurse(Grid grid)
	{		
		Evaluation eval = evaluate(grid);
		
		if (eval == Evaluation.ABANDON)
		{
			return;
		}
		else if (eval == Evaluation.ACCEPT)
		{
			solutions.add(grid);
		}
		else
		{
			assert eval == Evaluation.CONTINUE;
			ArrayList<Grid> temp = grid.next9Grids();
			for(Grid g: temp)
			{
				solveRecurse(g);
			}
		}
	}
	
	//
	// Returns Evaluation.ABANDON if the grid is illegal. 
	// Returns ACCEPT if the grid is legal and complete.
	// Returns CONTINUE if the grid is legal and incomplete.
	//
	public Evaluation evaluate(Grid grid)
	{
		if(!grid.isLegal())
		{
			return Evaluation.ABANDON;
		}
		else if(grid.isLegal() && grid.isFull())
		{
			return Evaluation.ACCEPT;
		}
		else 
		{
			return Evaluation.CONTINUE;
		}
	}

	
	public ArrayList<Grid> getSolutions()
	{
		return solutions;
	}
	
	
	public static void main(String[] args)
	{
		/*Grid g = TestGridSupplier.getPuzzle1();		// or any other puzzle
		Solver solver = new Solver(g);
		System.out.println("Will solve");
		System.out.println(g);
		solver.solve();
		System.out.println("");
		for(Grid meep: solver.getSolutions())
		{
		System.out.println(meep.toString());
		}
		
		Grid g = TestGridSupplier.getPuzzle1();		// or any other puzzle
		Solver solver = new Solver(g);
		System.out.println(g);
		solver.solve();
		System.out.println(solver.getSolutions());
		System.out.println(TestGridSupplier.getSolution3());
		System.out.println(solver.getSolutions());
		
		// Print out your solution, or test if it equals() the solution in TestGridSupplier.
	}
}*/

import java.util.*;


public class Solver 
{
	private Grid						problem;
	private ArrayList<Grid>				solutions;
	
	
	public Solver(Grid problem)
	{
		this.problem = problem;
	}
	
	//Initializes the ArrayList of solutions
	//Recursively solves problem
	public void solve()
	{
		
		solutions = new ArrayList<>();
		solveRecurse(problem);
	}
	
		
	/*
	 * Recursive method that solves and tests the board
	 * @param grid is the grid that is being tested
	 * If the grid is not legal, it drops the recursive method
	 * If the grid is legal and full, then it adds it to the ArrayList of solutions
	 * If the grid is legal but not full, it creates 9 new grids and runs it 
	 * recursively through this method again.
	 */
	private void solveRecurse(Grid grid)
	{		
		Evaluation eval = evaluate(grid);
		
		if (eval == Evaluation.ABANDON)
		{
			
		}
		else if (eval == Evaluation.ACCEPT)
		{
			solutions.add(grid);
		}
		else
		{
			ArrayList<Grid> asdf = new ArrayList<Grid>(grid.next9Grids());
			for(int i = 0; i<9; i++) {
				solveRecurse(asdf.get(i));
			}
			
		}
	}
	

	// Returns Evaluation.ABANDON if the grid is illegal. 
	// Returns ACCEPT if the grid is legal and complete.
	// Returns CONTINUE if the grid is legal and incomplete.
	//
	public Evaluation evaluate(Grid grid)
	{
		if(!grid.isLegal()) {
			return Evaluation.ABANDON;
		}
		else if(grid.isLegal() && grid.isFull()){
			return Evaluation.ACCEPT;
		}
		else {
			return Evaluation.CONTINUE;
		}
	}

	/*
	 * Returns the ArrayList of solutions
	 */
	public ArrayList<Grid> getSolutions()
	{
		return solutions;
	}
	
	/*
	 * Main method to test the solver class
	 */
	public static void main(String[] args)
	{
		Grid g = TestGridSupplier.getReject1();		// or any other puzzle
		Solver solver = new Solver(g);
		System.out.println(g);
		solver.solve();
		System.out.println(solver.getSolutions());
		//System.out.println(TestGridSupplier.getSolution3());
		System.out.println(solver.getSolutions());

	}	
}
